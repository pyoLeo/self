1.아래가 의도하지 않은 결과를 나타내는 이유를 설명하시오.
char ch = '가';
System.out.println(ch + '\n')
출력문 안에서 "\n"이 아니라 '\n'을 사용했기 때문에 '가'의 아스키코드값 44032와 \n의 아스키코드값 10이 더해진 값인 44042가 출력이 된다

2.변수의 scope 는?
지역변수 한 {} 안에서만 사용 가능
전역변수 함수 외부에서 선언, 영역 제한 없음
static변수 영역 제한 없음, 객체 생성유무에 영향을 받지 않는다

3.지역변수?
한 메소드 안에서만 사용이 가능한 변수

4.펙토리얼을 구하는 재귀 함수를 만드시오.
	public static int fac(int n) {
		if(n==1)
			return 1;
		
		else return n*fac(n-1);
	}
	
	public static void main(String[] args) {

		System.out.println("3 factorial : " + fac(3));
		System.out.println("5 factoral : " + fac(5));
	}

5.클래스의 구성요소는 무엇인가?
생성자, 멤버변수,메소드

6.원의 넓이는 구하는 프로그램을 아래와 같이 작성하시오.
-원클래스를 만들것
public class Circle {

	int rad;
	
	public int getRad() {
		return rad;
	}

	public void setRad(int rad) {
		this.rad = rad;
	}

	public double getArea() {
		return rad*rad*Math.PI;
	}
}

-메인 메소드를 가진 다른 클래스에서 원 객체를 생성할것
public class CirMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Circle c = new Circle();
		c.setRad(3);
		
		System.out.println("원의 넓이는 : " + c.getArea());
	}

}

7.객체란 무엇인가?
객체=붕어빵, 클래스=붕어빵틀로 비유할수있다.
클래스라는 정해진 틀의 모양으로 각각 다른 내용의 붕어빵인 객체를 생성할 수 있다

8. 아래의 클래스에 대하여, 메모리 그림을 그리시오.
Rectangle rec = new Rectangle();
 
public class Rectangle {
	int height;
	int width;
	
	public int getHeight() {
		return height;
	}
	
	public void setHeight(int height) {
		this.height = height;
	}
	
	public int getWidth() {
		return width;
	}
	
	public void setWidth(int width) {
		this.width = width;
	}
	
	public int getArea() {
		return width * height;
	}
	
}

9.클래스와 객체의 차이는 무엇인가?
클래스는 정해진 형식이고 객체는 형식에 맞춰 작성된 것
 
10.아래의 프로그램을 작성하시오.
-1 부터 num 까지 합을 구하는 class 를 작성하도록 하시오.
public class Sum {

	public int getSum(int num) {
		int tot = 0;
		for(int i = 1; i <= num; i++) {
			tot += i;
		}
		return tot;
	}
}

public class SumMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int num = 5;
		Sum s = new Sum();
		System.out.println("1부터 " + num + "까지의 합은 : " + s.getSum(num));
		
	}

}
11.아래의 클래스를 작성하시오.
StraPrint strPrint = new StarPrint();

strPrint.printTriangle(3); 
System.out.println();
strPrint.printReverseTriangle(3); 
===============================
*
**
***

***
**
*

public class StarPrint {
	public static void printTriangle(int n) {
		for(int i = 0; i < n; i++) {
			for(int j = 0; j <= i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
	
	public static void printReverseTriangle(int n) {
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < n-i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		StarPrint strPrint = new StarPrint();
		
		strPrint.printTriangle(3);
		System.out.println();
		strPrint.printReverseTriangle(3);
	}
}

12.아래의 프로그래밍을 작성하시오.

Gugudan gugudan = new Gugudan();
gugudan.printGugu(10);  //1단부터 10단까지 출력
gugudan.printGugu(20);  //1단부터 20단까지 출력

public class Gugudan {

	public void printGugu(int dan) {
		for(int i = 1; i <= dan; i++) {
			for(int j = 1; j <= 10; j++) {
				System.out.println(i + " * " + j + " = " + i*j);
			}
		}
	}
}

public class GuguMain {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Gugudan gugudan = new Gugudan();
		gugudan.printGugu(10);
		gugudan.printGugu(20);
	}

13. 아래의 BankAccount 객체에 대하여 그림을 그리시오.
   BankAccount ref1 = new BankAccount();
   BankAccount ref2 = ref1;



 
